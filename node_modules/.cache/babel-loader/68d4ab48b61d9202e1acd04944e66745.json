{"ast":null,"code":"// Import the functions you need from the SDKs you need\nimport { GoogleAuthProvider, getAuth, signInWithPopup, signInWithEmailAndPassword, createUserWithEmailAndPassword, sendPasswordResetEmail, signOut } from \"firebase/auth\";\nimport { getFirestore, query, getDocs, collection, where, addDoc } from \"firebase/firestore\";\nimport { initializeApp } from \"firebase/app\";\nimport { getAnalytics } from \"firebase/analytics\"; // TODO: Add SDKs for Firebase products that you want to use\n// https://firebase.google.com/docs/web/setup#available-libraries\n// Your web app's Firebase configuration\n// For Firebase JS SDK v7.20.0 and later, measurementId is optional\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyBl8kY69vE1dUl0JsJm13iH7BGZ5ji3CMI\",\n  authDomain: \"gifty-341101.firebaseapp.com\",\n  projectId: \"gifty-341101\",\n  storageBucket: \"gifty-341101.appspot.com\",\n  messagingSenderId: \"892749485107\",\n  appId: \"1:892749485107:web:f45df6ec206710ba92bf46\",\n  measurementId: \"G-JCQMCG0DW6\"\n}; // Initialize Firebase\n\nconst app = initializeApp(firebaseConfig);\nexport const auth = getAuth(app);\nconst db = getFirestore(app);\nconst googleProvider = new GoogleAuthProvider();\n\nconst signInWithGoogle = async () => {\n  try {\n    const res = await signInWithPopup(auth, googleProvider);\n    const user = res.user;\n    const q = query(collection(db, \"users\"), where(\"uid\", \"==\", user.uid));\n    const docs = await getDocs(q);\n\n    if (docs.docs.length === 0) {\n      await addDoc(collection(db, \"users\"), {\n        uid: user.uid,\n        name: user.displayName,\n        authProvider: \"google\",\n        email: user.email\n      });\n    }\n  } catch (err) {\n    console.error(err);\n    alert(err.message);\n  }\n};\n\nexport const logInWithEmailAndPassword = async (email, password) => {\n  try {\n    await signInWithEmailAndPassword(auth, email, password);\n  } catch (err) {\n    console.error(err);\n    alert(err.message);\n  }\n};\n\nconst registerWithEmailAndPassword = async (name, email, password) => {\n  try {\n    const res = await createUserWithEmailAndPassword(auth, email, password);\n    const user = res.user;\n    await addDoc(collection(db, \"users\"), {\n      uid: user.uid,\n      name,\n      authProvider: \"local\",\n      email\n    });\n  } catch (err) {\n    console.error(err);\n    alert(err.message);\n  }\n};\n\nconst sendPasswordReset = async email => {\n  try {\n    await sendPasswordResetEmail(auth, email);\n    alert(\"Password reset link sent!\");\n  } catch (err) {\n    console.error(err);\n    alert(err.message);\n  }\n};\n\nconst logout = () => {\n  signOut(auth);\n};","map":{"version":3,"sources":["/Users/camille/Documents/CodeProjects/FemmeHacks2022/gifty-341101/gifty/src/firebase.js"],"names":["GoogleAuthProvider","getAuth","signInWithPopup","signInWithEmailAndPassword","createUserWithEmailAndPassword","sendPasswordResetEmail","signOut","getFirestore","query","getDocs","collection","where","addDoc","initializeApp","getAnalytics","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","app","auth","db","googleProvider","signInWithGoogle","res","user","q","uid","docs","length","name","displayName","authProvider","email","err","console","error","alert","message","logInWithEmailAndPassword","password","registerWithEmailAndPassword","sendPasswordReset","logout"],"mappings":"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","sourcesContent":["// Import the functions you need from the SDKs you need\nimport {\n  GoogleAuthProvider,\n  getAuth,\n  signInWithPopup,\n  signInWithEmailAndPassword,\n  createUserWithEmailAndPassword,\n  sendPasswordResetEmail,\n  signOut,\n} from \"firebase/auth\";\nimport {\n  getFirestore,\n  query,\n  getDocs,\n  collection,\n  where,\n  addDoc,\n} from \"firebase/firestore\";\nimport { initializeApp } from \"firebase/app\";\nimport { getAnalytics } from \"firebase/analytics\";\n// TODO: Add SDKs for Firebase products that you want to use\n// https://firebase.google.com/docs/web/setup#available-libraries\n// Your web app's Firebase configuration\n// For Firebase JS SDK v7.20.0 and later, measurementId is optional\nconst firebaseConfig = {\n    apiKey: \"AIzaSyBl8kY69vE1dUl0JsJm13iH7BGZ5ji3CMI\",\n    authDomain: \"gifty-341101.firebaseapp.com\",\n    projectId: \"gifty-341101\",\n    storageBucket: \"gifty-341101.appspot.com\",\n    messagingSenderId: \"892749485107\",\n    appId: \"1:892749485107:web:f45df6ec206710ba92bf46\",\n    measurementId: \"G-JCQMCG0DW6\"\n};\n\n\n// Initialize Firebase\nconst app = initializeApp(firebaseConfig);\nexport const auth = getAuth(app);\nconst db = getFirestore(app);\nconst googleProvider = new GoogleAuthProvider();\nconst signInWithGoogle = async () => {\n    try {\n        const res = await signInWithPopup(auth, googleProvider);\n        const user = res.user;\n        const q = query(collection(db, \"users\"), where(\"uid\", \"==\", user.uid));\n        const docs = await getDocs(q);\n        if (docs.docs.length === 0) {\n            await addDoc(collection(db, \"users\"), {\n                uid: user.uid,\n                name: user.displayName,\n                authProvider: \"google\",\n                email: user.email,\n            });\n        }\n    } catch (err) {\n        console.error(err);\n        alert(err.message);\n    }\n};\n\nexport const logInWithEmailAndPassword = async (email, password) => {\n    try {\n        await signInWithEmailAndPassword(auth, email, password);\n    } catch (err) {\n        console.error(err);\n        alert(err.message);\n    }\n};\n\nconst registerWithEmailAndPassword = async (name, email, password) => {\n    try {\n        const res = await createUserWithEmailAndPassword(auth, email, password);\n        const user = res.user;\n        await addDoc(collection(db, \"users\"), {\n            uid: user.uid,\n            name,\n            authProvider: \"local\",\n            email,\n        });\n    } catch (err) {\n        console.error(err);\n        alert(err.message);\n    }\n};\n\nconst sendPasswordReset = async (email) => {\n    try {\n        await sendPasswordResetEmail(auth, email);\n        alert(\"Password reset link sent!\");\n    } catch (err) {\n        console.error(err);\n        alert(err.message);\n    }\n};\n\nconst logout = () => {\n    signOut(auth);\n};"]},"metadata":{},"sourceType":"module"}