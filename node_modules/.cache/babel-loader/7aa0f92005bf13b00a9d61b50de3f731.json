{"ast":null,"code":"// Import the functions you need from the SDKs you need\nimport { GoogleAuthProvider, getAuth, signInWithPopup, signInWithEmailAndPassword, createUserWithEmailAndPassword, sendPasswordResetEmail, signOut } from \"firebase/auth\";\nimport { getFirestore, query, getDocs, collection, where, addDoc } from \"firebase/firestore\";\nimport { initializeApp } from \"firebase/app\";\nimport { getAnalytics } from \"firebase/analytics\";\nimport { Navigate, useNavigate } from \"react-router-dom\";\nimport firebase from \"firebase/compat\"; // TODO: Add SDKs for Firebase products that you want to use\n// https://firebase.google.com/docs/web/setup#available-libraries\n// Your web app's Firebase configuration\n// For Firebase JS SDK v7.20.0 and later, measurementId is optional\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyBl8kY69vE1dUl0JsJm13iH7BGZ5ji3CMI\",\n  authDomain: \"gifty-341107.firebaseapp.com\",\n  projectId: \"gifty-341107\",\n  storageBucket: \"gifty-341107.appspot.com\",\n  messagingSenderId: \"623517276696\",\n  appId: \"1:623517276696:web:bd49f289bcdc739b7b416d\",\n  measurementId: \"G-D4000NHNQZ\"\n}; // Initialize Firebase\n\nexport const app = firebase.initializeApp(firebaseConfig);\nexport const auth = getAuth(app);\nconst db = getFirestore(app);\nconst googleProvider = new GoogleAuthProvider();\n\nconst signInWithGoogle = async () => {\n  try {\n    const res = await signInWithPopup(auth, googleProvider);\n    const user = res.user;\n    const q = query(collection(db, \"users\"), where(\"uid\", \"==\", user.uid));\n    const docs = await getDocs(q);\n\n    if (docs.docs.length === 0) {\n      await addDoc(collection(db, \"users\"), {\n        uid: user.uid,\n        name: user.displayName,\n        authProvider: \"google\",\n        email: user.email\n      });\n    }\n  } catch (err) {\n    console.error(err);\n    alert(err.message);\n  }\n};\n\nexport const logInWithEmailAndPassword = async (email, password) => {\n  console.log(\"signing in\");\n  signInWithEmailAndPassword(auth, email, password).then(userCredential => {\n    // Signed in\n    const user = userCredential.user; // ...\n  }).catch(error => {\n    const errorCode = error.code;\n    const errorMessage = error.message;\n  });\n};\nexport const registerWithEmailAndPassword = async (name, email, password) => {\n  const res = await createUserWithEmailAndPassword(auth, email, password).then(userCredential => {\n    // Signed in\n    const user = userCredential.user;\n    user.updateProfile(); // ...\n  }).catch(error => {\n    const errorCode = error.code;\n    const errorMessage = error.message; // ..\n  });\n};\n\nconst sendPasswordReset = async email => {\n  try {\n    await sendPasswordResetEmail(auth, email);\n    alert(\"Password reset link sent!\");\n  } catch (err) {\n    console.error(err);\n    alert(err.message);\n  }\n};\n\nexport const logout = () => {\n  signOut(auth);\n};","map":{"version":3,"sources":["/Users/camille/Documents/CodeProjects/FemmeHacks2022/gifty-341101/gifty/src/firebase.js"],"names":["GoogleAuthProvider","getAuth","signInWithPopup","signInWithEmailAndPassword","createUserWithEmailAndPassword","sendPasswordResetEmail","signOut","getFirestore","query","getDocs","collection","where","addDoc","initializeApp","getAnalytics","Navigate","useNavigate","firebase","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","app","auth","db","googleProvider","signInWithGoogle","res","user","q","uid","docs","length","name","displayName","authProvider","email","err","console","error","alert","message","logInWithEmailAndPassword","password","log","then","userCredential","catch","errorCode","code","errorMessage","registerWithEmailAndPassword","updateProfile","sendPasswordReset","logout"],"mappings":"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","sourcesContent":["// Import the functions you need from the SDKs you need\nimport {\n  GoogleAuthProvider,\n  getAuth,\n  signInWithPopup,\n  signInWithEmailAndPassword,\n  createUserWithEmailAndPassword,\n  sendPasswordResetEmail,\n  signOut,\n} from \"firebase/auth\";\nimport {\n  getFirestore,\n  query,\n  getDocs,\n  collection,\n  where,\n  addDoc,\n} from \"firebase/firestore\";\nimport { initializeApp } from \"firebase/app\";\nimport { getAnalytics } from \"firebase/analytics\";\nimport {Navigate, useNavigate} from \"react-router-dom\";\nimport firebase from \"firebase/compat\";\n// TODO: Add SDKs for Firebase products that you want to use\n// https://firebase.google.com/docs/web/setup#available-libraries\n// Your web app's Firebase configuration\n// For Firebase JS SDK v7.20.0 and later, measurementId is optional\nconst firebaseConfig = {\n    apiKey: \"AIzaSyBl8kY69vE1dUl0JsJm13iH7BGZ5ji3CMI\",\n    authDomain: \"gifty-341107.firebaseapp.com\",\n    projectId: \"gifty-341107\",\n    storageBucket: \"gifty-341107.appspot.com\",\n    messagingSenderId: \"623517276696\",\n    appId: \"1:623517276696:web:bd49f289bcdc739b7b416d\",\n    measurementId: \"G-D4000NHNQZ\"\n};\n\n// Initialize Firebase\nexport const app = firebase.initializeApp(firebaseConfig);\nexport const auth = getAuth(app);\nconst db = getFirestore(app);\nconst googleProvider = new GoogleAuthProvider();\nconst signInWithGoogle = async () => {\n    try {\n        const res = await signInWithPopup(auth, googleProvider);\n        const user = res.user;\n        const q = query(collection(db, \"users\"), where(\"uid\", \"==\", user.uid));\n        const docs = await getDocs(q);\n        if (docs.docs.length === 0) {\n            await addDoc(collection(db, \"users\"), {\n                uid: user.uid,\n                name: user.displayName,\n                authProvider: \"google\",\n                email: user.email,\n            });\n        }\n    } catch (err) {\n        console.error(err);\n        alert(err.message);\n    }\n};\n\nexport const logInWithEmailAndPassword = async (email, password) => {\n    console.log(\"signing in\");\n    signInWithEmailAndPassword(auth, email, password)\n        .then((userCredential) => {\n            // Signed in\n            const user = userCredential.user;\n            // ...\n        })\n        .catch((error) => {\n            const errorCode = error.code;\n            const errorMessage = error.message;\n        });\n};\n\nexport const registerWithEmailAndPassword = async (name, email, password) => {\n        const res = await createUserWithEmailAndPassword(auth, email, password)\n            .then((userCredential) => {\n            // Signed in\n            const user = userCredential.user;\n            user.updateProfile();\n            // ...\n        })\n            .catch((error) => {\n                const errorCode = error.code;\n                const errorMessage = error.message;\n                // ..\n            });\n};\n\nconst sendPasswordReset = async (email) => {\n    try {\n        await sendPasswordResetEmail(auth, email);\n        alert(\"Password reset link sent!\");\n    } catch (err) {\n        console.error(err);\n        alert(err.message);\n    }\n};\n\nexport const logout = () => {\n    signOut(auth);\n};"]},"metadata":{},"sourceType":"module"}